# Generated by sila2.code_generator; sila2.__version__: 0.10.4
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .potenserver_types import (
    PrepareCompund_IntermediateResponses,
    PrepareCompund_Responses,
    Rinse_IntermediateResponses,
    Rinse_Responses,
    RunExp_IntermediateResponses,
    RunExp_Responses,
    RunReference_IntermediateResponses,
    RunReference_Responses,
)

if TYPE_CHECKING:
    from ...server import Server


class PotenServerBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        Potentiostat pump + voltamperometry.

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def RunExp(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunExp_IntermediateResponses],
    ) -> RunExp_Responses:
        """
        Run experiment


        :param Jobfile: Jobfile

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def Rinse(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Rinse_IntermediateResponses],
    ) -> Rinse_Responses:
        """
        Rinse


        :param Jobfile: Jobfile

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def PrepareCompund(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[PrepareCompund_IntermediateResponses],
    ) -> PrepareCompund_Responses:
        """
        Prepare Compounds


        :param Jobfile: Jobfile

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def RunReference(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunReference_IntermediateResponses],
    ) -> RunReference_Responses:
        """
        Run Reference measurements


        :param Jobfile: Jobfile

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass
