# Generated by sila2.code_generator; sila2.__version__: 0.10.4
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.potenserver import (
    PotenServerBase,
    PrepareCompund_IntermediateResponses,
    PrepareCompund_Responses,
    Rinse_IntermediateResponses,
    Rinse_Responses,
    RunExp_IntermediateResponses,
    RunExp_Responses,
    RunReference_IntermediateResponses,
    RunReference_Responses,
)

if TYPE_CHECKING:
    from ..server import Server

import json
import os
from e_complex_robot import AutoComplex
from .utils import run_CV, run_DPV, load_cfg, load_ref_cfg, load_cfg_exp, proc_dpv, dpv_phasing, fit_gauss, gaussian
import time
import numpy as np
def log(instance, message, payload, filename, ref):
    with open(f"/home/poten/AsyncEchem/{filename}", "r") as f:
        data = f.read()
    if ref:
        instance.send_intermediate_response(RunReference_IntermediateResponses(message, payload.encode("utf-8")))
    else:
        instance.send_intermediate_response(RunExp_IntermediateResponses(message, payload.encode("utf-8")))


def send_data(instance, message, filename, ref):
    with open(filename, "r") as f:
        data = f.read()
    if ref:
        instance.send_intermediate_response(RunReference_IntermediateResponses(message, data.encode("utf-8")))
    else:
        instance.send_intermediate_response(RunExp_IntermediateResponses(message, data.encode("utf-8")))


class PotenServerImpl(PotenServerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)
        self.autocomplex = AutoComplex()

    def RunExp(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunExp_IntermediateResponses],
    ) -> RunExp_Responses:

        instance.begin_execution()  # set execution status from `waiting` to `running`
        
        jobdict =json.loads(Jobfile)
        cfg = load_cfg(jobdict)

        instance.send_intermediate_response(RunExp_IntermediateResponses("priming done. beginning complexation.", "data".encode("utf-8")))
        autocomplex = self.autocomplex


        autocomplex.run_complexation(
                num_metal=cfg.experiment.metal.position,
                num_ligand=cfg.experiment.ligand.position,
                quantity_metal=cfg.experiment.metal.volume,
                quantity_ligand=cfg.experiment.ligand.volume,
                quantity_buffer=cfg.experiment.quantity_buffer,
                quantity_electrolyte=cfg.experiment.quantity_electrolyte,
                mix_iteration=cfg.experiment.num_mixings
                )
        
        instance.send_intermediate_response(RunReference_IntermediateResponses("job received. transferring reaction solution", "data".encode("utf-8")))
        autocomplex.rxn_to_echem(0)
        autocomplex.rxn_to_echem(1)

        instance.send_intermediate_response(RunExp_IntermediateResponses("Beginning electrochemical measurements", "data".encode("utf-8")))
        instance.send_intermediate_response(RunExp_IntermediateResponses("Perorming DPV measurments", "data".encode("utf-8")))
        DPV_0, DPV_1 = run_DPV(cfg) 
        time.sleep(2)

        metal = jobdict["experiment"]["metal"]["position"] 
        ligand = jobdict["experiment"]["ligand"]["position"]
        name = jobdict["name"]
        send_data(instance, "DPV_data_0", DPV_0, True)
        with open(DPV_0, "r") as f:
            data = f.read()
        with open(f"{name}_DPV_poten_1.csv", "w") as f:
            f.write(data)
    
        
        time.sleep(2)
        send_data(instance, "DPV_data_1", DPV_1, True)
        with open(DPV_1, "r") as f:
            data = f.read()
        with open(f"{name}_DPV_poten_2.csv", "w") as f:
            f.write(data)

        instance.send_intermediate_response(RunExp_IntermediateResponses("Perorming CV measurments", "data".encode("utf-8")))
        CV_0, CV_1 = run_CV(cfg)
        time.sleep(2)
        send_data(instance, "CV_data_0", CV_0, True)
        with open(CV_0, "r") as f:
            data = f.read()
        with open(f"{name}_CV_poten_1.csv", "w") as f:
            f.write(data)
        time.sleep(2)
        send_data(instance, "CV_data_1", CV_1, True)
        with open(CV_1, "r") as f:
            data = f.read()
        with open(f"{name}_CV_poten_2.csv", "w") as f:
            f.write(data)

        instance.send_intermediate_response(RunExp_IntermediateResponses("Cleaning reaction cell", "data".encode("utf-8")))
        autocomplex.clean_echem(0)
        autocomplex.clean_echem(1)
        autocomplex.clean_rxn()

        os.remove(DPV_0)
        os.remove(DPV_1)
        os.remove(CV_0)
        os.remove(CV_1)

        return RunExp_Responses("run completed")

    def Rinse(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Rinse_IntermediateResponses],
    ) -> Rinse_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`

        jobdict =json.loads(Jobfile)

        autocomplex = self.autocomplex

        autocomplex.clean_echem(0)
        autocomplex.clean_echem(1)
        autocomplex.clean_rxn()

        return Rinse_Responses("success")

    def PrepareCompund(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[PrepareCompund_IntermediateResponses],
    ) -> PrepareCompund_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`

        autocomplex = AutoComplex()
        jobdict =json.loads(Jobfile)
        cfg = load_cfg(jobdict)
        autocomplex = AutoComplex()

        instance.send_intermediate_response(RunExp_IntermediateResponses("priming done. beginning complexation.", "data"))
        autocomplex.run_complexation(
                num_metal=cfg.experiment.metal.position,
                num_ligand=cfg.experiment.ligand.position,
                quantity_metal=cfg.experiment.metal.volume,
                quantity_ligand=cfg.experiment.ligand.volume,
                quantity_buffer=1-(cfg.experiment.ligand.volume/2),
                quantity_electrolyte=1-(cfg.experiment.ligand.volume/2),
                mix_iteration=cfg.experiment.num_mixings
                )

        return PrepareCompund_Responses("complexation completed")

    def RunReference(
        self,
        Jobfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunReference_IntermediateResponses],
    ) -> RunReference_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        
        jobdict =json.loads(Jobfile)
        cfg = load_ref_cfg(jobdict)
        name = jobdict["name"]

        instance.send_intermediate_response(RunReference_IntermediateResponses("job received. transferring reference solution", "data".encode("utf-8")))
        autocomplex = self.autocomplex
        autocomplex.ref_to_echem(0)
        autocomplex.ref_to_echem(1)

        instance.send_intermediate_response(RunExp_IntermediateResponses("Beginning electrochemical measurements", "data".encode("utf-8")))

        instance.send_intermediate_response(RunExp_IntermediateResponses("Perorming DPV measurments", "data".encode("utf-8")))
        DPV_0, DPV_1 = run_DPV(cfg)
        time.sleep(2)
        send_data(instance, "DPV_data_0", DPV_0, True)
        with open(DPV_0, "r") as f:
            data = f.read()
        with open(f"ref_poten_1.csv", "w") as f:
            f.write(data)
        time.sleep(2)
        send_data(instance, "DPV_data_1", DPV_1, True)
        with open(DPV_1, "r") as f:
            data = f.read()
        with open(f"ref_poten_2.csv", "w") as f:
            f.write(data)

        data = np.genfromtxt(DPV_0,delimiter=',')
        dpv = proc_dpv(data, decay_ms =500, pulse_ms = 50, pulse_from_end=4,decay_from_end=20)
        np.savetxt(f'references/{name}_poten1.csv', dpv[:, 0:5], delimiter=',', fmt="%.2E,%.2E,%.2E,%d,%d")
        dpv_up, dpv_down = dpv_phasing(dpv)
        gau_opt = fit_gauss(dpv_up)
        with open(f"gau_opt.log", "a") as f:
            f.write(f"{name}_poten_1:\t"+str(gau_opt)+"\n")
        fit_curv = gaussian(dpv_up[:, 1], gau_opt[0], gau_opt[1], gau_opt[2], gau_opt[3])
        np.savetxt(f"references/{name}_poten1_fitcurv.csv", fit_curv, delimiter=',')


        data = np.genfromtxt(DPV_1,delimiter=',')
        dpv = proc_dpv(data, decay_ms =500, pulse_ms = 50, pulse_from_end=4,decay_from_end=20)
        np.savetxt(f'references/{name}_poten2.csv', dpv[:, 0:5], delimiter=',', fmt="%.2E,%.2E,%.2E,%d,%d")
        dpv_up, dpv_down = dpv_phasing(dpv)
        gau_opt = fit_gauss(dpv_up)
        with open(f"gau_opt.log", "a") as f:
            f.write(f"{name}_poten_2:\t"+str(gau_opt)+"\n")
        fit_curv = gaussian(dpv_up[:, 1], gau_opt[0], gau_opt[1], gau_opt[2], gau_opt[3])
        np.savetxt(f"references/{name}_poten2_fitcurv.csv", fit_curv, delimiter=',')


        instance.send_intermediate_response(RunExp_IntermediateResponses("Perorming CV measurments", "data".encode("utf-8")))
        CV_0, CV_1 = run_CV(cfg)
        time.sleep(2)
        send_data(instance, "CV_data_0", CV_0, True)
        with open(CV_0, "r") as f:
            data = f.read()
        with open(f"references/{name}_CV_poten_1.csv", "w") as f:
            f.write(data)
        time.sleep(2)
        send_data(instance, "CV_data_1", CV_1, True)
        with open(CV_1, "r") as f:
            data = f.read()
        with open(f"references/{name}_CV_poten_2.csv", "w") as f:
            f.write(data)


        instance.send_intermediate_response(RunExp_IntermediateResponses("Cleaning reaction cell", "data".encode("utf-8")))
        autocomplex.clean_echem(0)
        autocomplex.clean_echem(1)

        os.remove(DPV_0)
        os.remove(DPV_1)
        os.remove(CV_0)
        os.remove(CV_1)




        return RunExp_Responses("run completed")



